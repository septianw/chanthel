/**
Class Orm adalah kelas yang berisi function standard untuk melakukan query ke database yang berbeda.
Class ini menggunaka driver-driver tertentu untuk menentukan query yang akan dieksekusi.
*/


/** Dokumentasi orm*/
  /** Read Operation **/
    /**
    //mysql dan mongodb sudah oke
    1. Fungsi find() digunakan untuk menampilkan semua data.
       Parameter input dikosongkan dengan mengisikan "{}"
       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi find():
      user.find({}, function(err, data){
        console.log(data);
      });
    */

    //mysql dan mongodb sudah oke
    /**
    2. Fungsi findById(query, callback) digunakan untuk menampilkan data berdasarkan id.
       Parameter input
       - query : "{field_id: value_id}"

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi findById(query, callback):
    user.findById({uid: 1}, function(err, data){
      console.log(data);
    });
    */

    //mysql dan mongodb sudah oke
    /**
    3. Fungsi findWhere(query, callback) digunakan untuk menampilkan data berdasarkan satu kondisi tertentu.
       Parameter input
       - query: "{field: "value"}"

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi findWhere():
      user.findWhere({firstname: "Danang"}, function(err, data){
        console.log(data);
      });
    */

    //mysql dan mongodb sudah oke
    /**
    4. Fungsi findWhereAnd(query, callback) digunakan untuk menampilkan data berdasarkan beberapa kondisi tertentu yang dihubungkan dengan operator And.

       Parameter input berupa array object/ json
       - query: "[{field1: "value1"}, {field2: "value2"}, ..., {{fieldn: "valuen"}}]"

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi findWhereAnd(query, callback):
      user.findWhereAnd([{firstname: "Danang"}, {lastname: "Kastowo"}], function(err, data){
        console.log(data);
      });
    */

    //mysql dan mongodb sudah oke
    /**
    5. Fungsi findWhereOr(query, callback) digunakan untuk menampilkan data berdasarkan beberapa kondisi tertentu yang dihubungkan dengan operator Or.

       Parameter input berupa array object/ json
       - query: "[{field1: "value1"}, {field2: "value2"}, ..., {{fieldn: "valuen"}}]"

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi findWhereOr():
      user.findWhereOr([{firstname: "Danang"}, {lastname: "Kastowo"}], function(err, data){
        console.log(data);
      });
    */

    //mysql dan mongodb sudah oke
    /**
    6. Fungsi findLike(query, callback) digunakan untuk menampilkan data berdasarkan satu kondisi tertentu yang menggunakan fungsi Like.
       Fungsi ini biasanya digunakan pada proses pencarian data dengan karakter random.

       Parameter input
       - query : "{field: "value"}"

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi findLike():
      user.findLike({firstname: "ang"}, function(err, data){
        console.log(data);
      });
    */

    //mysql dan mongodb sudah oke
    /**
    7. Fungsi findLikeAnd(query, callback) digunakan untuk menampilkan data berdasarkan kondisi tertentu yang menggunakan fungsi Like dan operator And.
       Fungsi ini biasanya digunakan pada proses pencarian data dengan karakter random.

       Parameter input berupa array object/ json
       - query : "[{field1: "value1"}, {field2: "value2"}, ..., {{field n: "value n"}}]"

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi findLikeAnd(query, callback):
      user.findLikeAnd([{firstname: "ang"}, {email: "anang"}], function(err, data){
        console.log(data);
      });
    */

    //mysql sudah oke, mongodb masih ada bug, hasil yang sama dengan operator And
    /**
    8. Fungsi findLikeOr() digunakan untuk menampilkan data berdasarkan kondisi tertentu yang menggunakan fungsi Like
       dan operator Or.
       Fungsi ini biasanya digunakan pada proses pencarian data dengan karakter random.

       Parameter input berupa array object/ json
       - query : "[{field1: "value1"}, {field2: "value2"}, ..., {{field n: "value n"}}]"

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi findLikeOr():
      user.findLikeOr([{firstname: "ang"}, {email: "anang"}], function(err, data){
        console.log(data);
      });
    */


    //mysql dan mongodb sudah oke
    /**
    9. Fungsi findJoin(query, join, callback) digunakan untuk menampilkan data yang digabungkan dengan satu tabel yang berelasi.

       Parameter input:
       - query: syarat atau kondisi joinnya
       - join: berisi key value, key menunjukkan nama tabel dan value menunjukkan foreign key-nya.

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

    Contoh penggunaan fungsi findJoin():
      1. Menampilkan dengan kondisi
         user.findJoin({uid: 3}, {apikey: "uid"}, function(err, data){
            console.log(data);
          });

      2. Menampilkan semua data yang berelasi
         user.findJoin({}, {apikey: "uid"}, function(err, data){
            console.log(data);
          });
    */

  /** Insert Operation **/
    //mysql dan mongodb sudah oke
    /**
    1. Fungsi add(query, callback) digunakan untuk menambahkan satu record dalam tabel tertentu.

       Parameter input:
       - query: data yang akan ditambahkan dengan format JSON.

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

       Contoh penggunaan fungsi add(query, callback):
        user.add({firstname: "Danang", lastname: "Kastowo"}, function(err, data){
          console.log(data);
        });

    */

  /** Update Operation **/
    //mysql dan mongodb sudah oke
    /**
    1. Fungsi update(query, update, callback) digunakan untuk mengubah satu record tertentu berdasarkan kondisi tertentu.

       Parameter input:
       - query: Kondisi data yang akan diupdate
       - update: Data yang akan meng-update data lama, berupa array JSON

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

       Contoh penggunaan fungsi update():
        user.update({firstname: "Danang"}, [{firstname: "Dining"}, {lastname: "Kastiwi"}], function(err, data){
          console.log(data);
        });

    */

  /** Delete Operation **/
    //mysql dan mongodb sudah oke
    /**
    1. Fungsi delete(query, callback) digunakan untuk mengubah satu record tertentu berdasarkan kondisi tertentu.

       Parameter input:
       - query: Kondisi data yang akan dihapus

       Parameter output menggunakan callback function, dimana didalam callback tersebut memperoleh 2 output,
       - err, digunakan untuk menampung setiap error
       - data, digunakan untuk menampung hasil query berupa array JSON.

       Contoh penggunaan fungsi delete():
        user.delete({firstname: "Danang"}, function(err, data){
          console.log(data);
        });

    */
/** end **/

function Orm(name, config, schema, schemaPath){
  var name = name;
  var schema = schema;
  this.config = config;
  this.schemaPath = schemaPath;

  switch (config.type){
    case 'mysql':
      var mysql = require('./driver/mysql.js');
      this.driver = new mysql(name, config, schema);
      break;
    // case 'postgres':
    //   var postgres = require('./driver/postgres.js');
    //   this.driver = new postgres(name, config, schema);
    //   break;
    // case 'mongodb':
    //   var mongodb = require('./driver/mongodb.js');
    //   this.driver = new mongodb(name, config, schema);
    //   break;
    // case 'oracle':
    //   var oracle = require('./driver/oracle.js');
    //   this.driver = new oracle(name, config, schema);
    //   break;

    default:

  }
}
//read operation
Orm.prototype.find = function (query, callback) {
  this.driver.find(query, callback);
}

Orm.prototype.findById = function (query, callback){
  this.driver.findById(query, callback);
}

Orm.prototype.findWhere = function (query, callback){
  this.driver.findWhere(query, callback);
}

Orm.prototype.findWhereAnd = function (query, callback){
  this.driver.findWhereAnd(query, callback);
}

Orm.prototype.findWhereOr = function (query, callback){
  this.driver.findWhereOr(query, callback);
}

Orm.prototype.findLike = function (query, callback){
  this.driver.findLike(query, callback);
}

Orm.prototype.findLikeAnd = function (query, callback){
  this.driver.findLikeAnd(query, callback);
}

Orm.prototype.findLikeOr = function (query, callback){ //masih ada bug, belum solved
  this.driver.findLikeOr(query, callback);
}

Orm.prototype.findJoin = function(query, join, callback){
  //load schema tabel join, get key join
  for(key in join){
    keyJoin = key;
  }

  var Join = require(this.schemaPath), //cek lokasi modules dari path
      schemaJoin = Join[keyJoin],
      join2 = new schemaJoin(),
      DB = new Database(this.config),
      schemaJoin = {};

  //call function generate schema
  for(key in join2){
    result = DB.generateSchema(key, join2[key]);
    schemaJoin[key] = result; //send object sequelize
  }

  this.driver.findJoin(query, join, schemaJoin, callback);
}

//insert operation
Orm.prototype.add = function(query, callback){
  this.driver.add(query, callback);
}

//update operation
Orm.prototype.update = function(query, update, callback){
  this.driver.update(query, update, callback);
}

//delete operation
Orm.prototype.delete = function(query, callback){
  this.driver.delete(query, callback);
}


/**
Class Database adalah kelas yang digunakan untuk mengkonversi schema default menjadi schema dan model sesuai
dengan mesin yang digunakan.
*/
function Database(confdb, schemaPath){
  this.schemaPath = schemaPath;
  //create constructor
  if (confdb) {
    this.config = confdb;
  } else {
    this.config = {};
  }
}
/**
1. function model digunakan untuk menciptakan schema yang dibutuhkan oleh mesin.
*/

Database.prototype.model = function (name){
  var config = this.config,
      newSchema = {};

  //ambil schema berdasarkan parameter name
  Model = require(this.schemaPath),
  Schema = Model[name],
  schema = new Schema();
 //check struktur dari table_schema
  for(key in schema){
    //call generate function
    result = this.generateSchema(key, schema[key]);
    newSchema[key] = result; //send object sequelize
  }

  var orm = new Orm(name, config, newSchema, this.schemaPath);
  return orm;
}

Database.prototype.generateSchema = function(key, value){
  var config = this.config;
  switch (config.type){
    case 'mysql':
      //cek value apakah komplek atau tidak, jika komplek value berupa object
      if(typeof value == 'object'){
        for(x in value){
          //tipe data integer
          if(value[x] == 'Integer' || value[x] == 'String' || value[x] == 'Blob'|| value[x] == 'Text'){
            value[x] = "Sequelize."+value[x].toUpperCase();
          }

          //cek apakah ada tanda ()
          //tipe data string dengan panjang karakter tertentu, ex: String(25)
          
          if(value[x] != true){
            if(value[x].indexOf("(") > 0){
              position1 = value[x].indexOf("(");
              position2 = value[x].indexOf("(");

              dataType = value[x].substr(0,position1);
              dateLength = value[x].substr(position1,position2);
              value[x] = {type:"Sequelize." + dataType.toUpperCase() + dateLength ,field:key};
            }
          }  

          if(value[x] == 'Date Time'){
            value[x] = "Sequelize.DATE";
          }

          //cek key == default
          if(x == 'default'){
            json = JSON.stringify(value);
            temp = json.replace("\"default\":", "\"defaultValue\":");
            value = JSON.parse(temp);
          }
          value.field = key;
        }
      }else{
        //tipe data integer atau string tanpa range data.
        if(value == 'Integer' || value == 'String' || value == 'Blob' || value == 'Text'){
          value = {type:"Sequelize."+value.toUpperCase(),field:key};
        }else if(value == 'Date Time'){
          value = "Sequelize.DATE";
        }else{
          //cek apakah ada tanda ()
          //tipe data string dengan panjang karakter tertentu, ex: String(25)
          if(value.indexOf("(") > 0){
            position1 = value.indexOf("(");
            position2 = value.indexOf("(");

            dataType = value.substr(0,position1);
            dateLength = value.substr(position1,position2);

            value = {type:"Sequelize." + dataType.toUpperCase() + dateLength ,field:key};
          }
        }
      }
      break;

    // case 'postgres':
    //   //cek value apakah komplek atau tidak, jika komplek value berupa object
    //   if(typeof value == 'object'){
    //
    //     for(x in value){
    //       //tipe data integer
    //       if(value[x] == 'Integer' || value[x] == 'String' || value[x] == 'Blob' || value[x] == 'Text'){
    //         value[x] = "Sequelize."+value[x].toUpperCase();
    //       }
    //
    //       if(value[x] == 'Date Time'){
    //         value[x] = "Sequelize.DATE";
    //       }
    //
    //       //cek key == default
    //       if(x == 'default'){
    //         json = JSON.stringify(value);
    //         temp = json.replace("\"default\":", "\"defaultValue\":");
    //         value = JSON.parse(temp);
    //       }
    //       value.field = key;
    //     }
    //   }else{
    //     //tipe data integer atau string tanpa range data.
    //     if(value == 'Integer' || value == 'String' || value == 'Blob' || value == 'Text'){
    //       value = {type:"Sequelize."+value.toUpperCase(),field:key};
    //     }else if(value == 'Date Time'){
    //       value = "Sequelize.DATE";
    //     }else{
    //       //cek apakah ada tanda ()
    //       //tipe data string dengan panjang karakter tertentu, ex: String(25)
    //       if(value.indexOf("(") > 0){
    //         position1 = value.indexOf("(");
    //         position2 = value.indexOf("(");
    //
    //         dataType = value.substr(0,position1);
    //         dateLength = value.substr(position1,position2);
    //
    //         value = {type:"Sequelize." + dataType.toUpperCase() + dateLength ,field:key};
    //       }
    //     }
    //   }
    //   break;
    // case 'oracle':
    //   //cek value apakah komplek atau tidak, jika komplek value berupa object
    //   if(typeof value == 'object'){
    //
    //     for(x in value){
    //       //tipe data integer
    //       if(value[x] == 'Integer'){
    //         value[x] = 'INT';
    //       }else if(value[x] == 'String'){
    //         value[x] = 'VARCHAR(255)';
    //       }else if(value[x] == 'Blob'){
    //         value[x] = 'BLOB'
    //       }
    //     }
    //   }else{
    //     //tipe data integer atau string tanpa range data.
    //     if(value == 'Integer'){
    //       value = 'INT';
    //     }else if(value == 'String'){
    //       value = 'VARCHAR(255)';
    //     }else if(value == 'Blob'){
    //       value = 'BLOB'
    //     }else if(value == 'Date Time'){
    //       value = "DATE TIME";
    //     }else{
    //       //cek apakah ada tanda ()
    //       //tipe data string dengan panjang karakter tertentu, ex: String(25)
    //       if(value.indexOf("(") > 0){
    //         position1 = value.indexOf("(");
    //         position2 = value.indexOf("(");
    //
    //         dataType = value.substr(0,position1);
    //
    //         if(dataType == 'Integer'){
    //           dataType = 'INT';
    //         }else if(dataType = 'String'){
    //           dataType = 'VARCHAR';
    //         }
    //
    //         dateLength = value.substr(position1,position2);
    //
    //         value = dataType + dateLength;
    //       }
    //     }
    //   }
    //   break;
    //
    // case 'mongodb':
    //   newSchema = {};
    //
    //   if(typeof value == 'object'){
    //     for(x in value){
    //       //tipe data integer
    //       if(value[x] == 'Integer'){
    //         value[x] = 'Number';
    //       }else if(value[x] == 'Blob'){
    //         value[x] = 'String';
    //       }
    //
    //       if(x == 'primaryKey' || x == 'autoIncrement' ){
    //         delete value.primaryKey;
    //         delete value.autoIncrement;
    //       }
    //     }
    //   }else{
    //     //tipe data integer atau string tanpa range data.
    //     if(value == 'Integer'){
    //       value = 'Number';
    //     }else if(value == 'Blob'){
    //       value = 'String';
    //     }else
    //       //cek apakah ada tanda ()
    //       //tipe data string dengan panjang karakter tertentu, ex: String(25)
    //       if(value.indexOf("(") > 0){
    //         position1 = value.indexOf("(");
    //         position2 = value.indexOf("(");
    //
    //         dataType = value.substr(0,position1);
    //         value = dataType;
    //       }
    //   }
    //
    //   break;
    default:

  }

  return value;
}

exports = module.exports = Database;
