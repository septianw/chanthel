function Driver (name, config, schema) {
  //constructor driver
  Sequelize = require('sequelize'), 
  sequelize = new Sequelize(config.name, config.user, config.pass, {
          host: config.host,
          port: config.port,
          dialect: config.type,
          define: {
            timestamps: false,
          }
        });
  
  for (keys in schema){
    if(schema[keys].type){
      schema[keys].type = eval(schema[keys].type);
    }
    
    //check date type
    if(schema[keys] == 'Sequelize.DATE'){
      schema[keys] = eval(schema[keys]);
    }
  }
  
  
  //class global variable
  this.config = config;
  this.sequelize = sequelize;
  this.Sequelize = Sequelize;
  this.Model = sequelize.define(name, schema, {freezeTableName:true});
}

Driver.prototype.is_connected = function (callback) {
  this.db.authenticate().then(callback).catch(callback);
}

//read operation
Driver.prototype.find = function(query, callback){
  var result = [];
  this.Model.findAll().then(function(data){
    for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

Driver.prototype.findById = function(query, callback){
  var result = [];
  //get key and value from query
  this.Model.findAll({where: query}).then(function(data){
     for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

Driver.prototype.findWhere = function(query, callback){
  var result = [];
  //get key and value from query
  this.Model.findAll({where: query}).then(function(data){
     for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

Driver.prototype.findWhereAnd = function(query, callback){
  var result = [];
  this.Model.findAll({where: {$and: query}}).then(function(data){
     for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

Driver.prototype.findWhereOr = function(query, callback){
  var result = [];
  this.Model.findAll({where: {$or: query}}).then(function(data){
     for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

Driver.prototype.findLike = function(query, callback){
  var result = [],
      query1 = {};
  //get key and value from query
  for(key in query){
    query1[key] = {$like: '%' + query[key] + '%'};
  }
  
  this.Model.findAll({where: query1}).then(function(data){
     for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

Driver.prototype.findLikeAnd = function(query, callback){
  var result = [],
      query1 = {};
  for(key1 in query){
    for(key2 in query[key1]){
      query1[key2] = {$like: '%' + query[key1][key2] + '%'};
    }
  }
  
  this.Model.findAll({where: {$and: query1}}).then(function(data){
     for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

Driver.prototype.findLikeOr = function(query, callback){
  var result = [],
      query1 = {};
  for(key1 in query){
    for(key2 in query[key1]){
      query1[key2] = {$like: '%' + query[key1][key2] + '%'};
    }
  }
  
  this.Model.findAll({where: {$or: query1}}).then(function(data){
     for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

//findJoin skip dulu
Driver.prototype.findJoin = function(query, join, schemaJoin, callback){
  //init class sequelize 
  var result = [],
      sequelize = this.sequelize,
      Sequelize = this.Sequelize,
      Join = {};
  
  //ambil nama tabel join dan foreign key yang digunakan
  for(key in join){
    nameJoin = key;
    Join.foreignKey = join[key];
  }
  
  for (keys in schemaJoin){
    if(schemaJoin[keys].type){
      schemaJoin[keys].type = eval(schemaJoin[keys].type);
    }
  }
  
  //define schema join
  this.ModelJoin = sequelize.define(nameJoin, schemaJoin, {freezeTableName:true});
  
  if(nameJoin == 'inventory' || nameJoin == 'config_detail'){
    //many : 1
    this.Model.hasMany(this.ModelJoin, Join);
    this.ModelJoin.belongsTo(this.Model, Join);
  }else{
    //1 : many
    this.Model.belongsTo(this.ModelJoin, Join);
    this.ModelJoin.hasMany(this.Model, Join);
  }
  
  
  this.Model.findAll({where: query,include: [this.ModelJoin]}).then(function(data, err) {
    for (key in data){
      jsonString = JSON.stringify(data[key]);
      result[key] = JSON.parse(jsonString);
    }
    
    callback(null, result);
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

//insert operation
Driver.prototype.add = function(query, callback){
  var dataInsert = this.Model.build(query);
  
  this.Model.sync({force:false}).then(function () {
    //Inserting Data into database
    dataInsert.save().then(function () {
      callback(null, {errcode:0, message: "Inserting data is success"});
    }).catch(function (err) {
      callback(err);
    }).done();
  }).catch(function (err) {
    
    callback(err);
  }).done();
  
}

//update operation
Driver.prototype.update = function(query, update, callback){
  var newUpdate = {};
  
  this.Model.find({where:query}).then(function(data, err){
    if(err){
      
      callback(err);
    }else if(data){
      //susun ulang data update supaya sesuai dengan format sequelize
      for(key1 in update){
        for(key2 in update[key1]){
          newUpdate[key2] = update[key1][key2];
        }
      }
      
      data.update(newUpdate).then(function(data, err){
        if(err){
          
          callback(err);  
        }else{
          
          callback(null, {errcode:0, message: "The data has been updated"});
        }
      }).catch(function(err){
        
        callback(err, {errcode:0, message: err.message});
      });
      
    }else{
      
      callback(1, {errcode:1, message: "Data not found"});
    }
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}

//delete operation
Driver.prototype.delete = function(query, callback){
  this.Model.find({where:query}).then(function(data, err){
    if(err){
      
      callback(err);
    }else if(data){
      data.destroy().then(function(data, err){
        if(err){
          
          callback(err);
        }else{
          
          callback(null, {errcode:0, message: "The data has been deleted"});
        }
      }).catch(function(err){
        
        callback(err, {errcode:0, message: err.message});
      });
    }else{
      
      callback(1, {errcode:1, message: "Data not found"});
    }
  }).catch(function(err){
    
    callback(err, {errcode:0, message: err.message});
  });
}



exports = module.exports = Driver;